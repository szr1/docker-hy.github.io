"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[48],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=p(n),m=o,h=d["".concat(s,".").concat(m)]||d[m]||c[m]||r;return n?a.createElement(h,l(l({ref:t},u),{},{components:n})):a.createElement(h,l({ref:t},u))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,l=new Array(r);l[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[d]="string"==typeof e?e:o,l[1]=i;for(var p=2;p<r;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},1389:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>c,frontMatter:()=>r,metadata:()=>i,toc:()=>p});var a=n(7462),o=(n(7294),n(3905));const r={title:"Defining start conditions for the container"},l=void 0,i={unversionedId:"part-1/section-4",id:"part-1/section-4",title:"Defining start conditions for the container",description:"Next, we will start moving towards a more meaningful image. yt-dlp is a program that downloads YouTube and Imgur videos. Let's add it to an image - but this time, we will change our process. Instead of our current process where we add things to the Dockerfile and hope it works, let's try another approach. This time we will open up an interactive session and test stuff before \"storing\" it in our Dockerfile.",source:"@site/docs/part-1/section-4.md",sourceDirName:"part-1",slug:"/part-1/section-4",permalink:"/part-1/section-4",draft:!1,editUrl:"https://github.com/docker-hy/docker-hy.github.io/blob/master/docs/part-1/section-4.md",tags:[],version:"current",frontMatter:{title:"Defining start conditions for the container"},sidebar:"materialSidebar",previous:{title:"In-depth dive into images",permalink:"/part-1/section-3"},next:{title:"Interacting with the container via volumes and ports",permalink:"/part-1/section-5"}},s={},p=[{value:"Improved curler",id:"improved-curler",level:2}],u={toc:p},d="wrapper";function c(e){let{components:t,...n}=e;return(0,o.kt)(d,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Next, we will start moving towards a more meaningful image. ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/yt-dlp/yt-dlp"},"yt-dlp")," is a program that downloads YouTube and ",(0,o.kt)("a",{parentName:"p",href:"https://imgur.com/"},"Imgur")," videos. Let's add it to an image - but this time, we will change our process. Instead of our current process where we add things to the Dockerfile and hope it works, let's try another approach. This time we will open up an interactive session and test stuff before \"storing\" it in our Dockerfile."),(0,o.kt)("p",null,"By following the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/yt-dlp/yt-dlp/wiki/Installation"},"yt-dlp installation instructions")," we will start as follows:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-console"},"$ docker run -it ubuntu:22.04\n\n  root@8c587232a608:/# curl -L https://github.com/yt-dlp/yt-dlp/releases/latest/download/yt-dlp -o /usr/local/bin/yt-dlp\n  bash: curl: command not found\n")),(0,o.kt)("p",null,"..and, as we already know, curl is not installed - let's add ",(0,o.kt)("inlineCode",{parentName:"p"},"curl")," with ",(0,o.kt)("inlineCode",{parentName:"p"},"apt-get")," again."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-console"},"$ apt-get update && apt-get install -y curl\n$ curl -L https://github.com/yt-dlp/yt-dlp/releases/latest/download/yt-dlp -o /usr/local/bin/yt-dlp\n")),(0,o.kt)("p",null,"At some point, you may have noticed that ",(0,o.kt)("em",{parentName:"p"},"sudo")," is not installed either, but since we are ",(0,o.kt)("em",{parentName:"p"},"root")," we don't need it."),(0,o.kt)("p",null,"Next, we will add permissions and run the downloaded binary:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-console"},"$ chmod a+rx /usr/local/bin/yt-dlp\n$ yt-dlp\n/usr/bin/env: 'python3': No such file or directory\n")),(0,o.kt)("p",null,"Okay, ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/yt-dlp/yt-dlp?tab=readme-ov-file#dependencies"},"documentation")," mentions that Python 3.8 or later is needed to run yt-dlp. So let us install that:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-console"},"$ apt-get install -y python3\n")),(0,o.kt)("p",null,"We can now try to run the app again:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-console"},"$ yt-dlp\n\n  Usage: yt-dlp [OPTIONS] URL [URL...]\n\n  yt-dlp: error: You must provide at least one URL.\n  Type yt-dlp --help to see a list of all options.\n")),(0,o.kt)("p",null,"It works, we just need to give it a URL."),(0,o.kt)("p",null,"So now when we know exactly what we need. Starting FROM ubuntu:22.04, we'll add the above steps to our ",(0,o.kt)("inlineCode",{parentName:"p"},"Dockerfile"),". We should always try to keep the most prone to change rows at the bottom, by adding the instructions to the bottom we can preserve our cached layers - this is a handy practice to speed up the build process when there are time-consuming operations like downloads in the Dockerfile. We also added WORKDIR, which will ensure the videos will be downloaded there."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dockerfile"},'FROM ubuntu:22.04\n\nWORKDIR /mydir\n\nRUN apt-get update && apt-get install -y curl python3\nRUN curl -L https://github.com/yt-dlp/yt-dlp/releases/latest/download/yt-dlp -o /usr/local/bin/yt-dlp\nRUN chmod a+x /usr/local/bin/yt-dlp\n\nCMD ["/usr/local/bin/yt-dlp"]\n')),(0,o.kt)("p",null,"We have also overridden ",(0,o.kt)("inlineCode",{parentName:"p"},"bash")," as our image command (set on the base image) with ",(0,o.kt)("em",{parentName:"p"},"yt-dlp")," itself. This will not quite work, but let's see why."),(0,o.kt)("p",null,"Let us now build the Dockerfile as image ",(0,o.kt)("inlineCode",{parentName:"p"},"yt-dlp")," and run it:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-console"},"$ docker build -t yt-dlp .\n  ...\n\n$ docker run yt-dlp\n\n  Usage: yt-dlp [OPTIONS] URL [URL...]\n\n  yt-dlp: error: You must provide at least one URL.\n  Type yt-dlp --help to see a list of all options.\n")),(0,o.kt)("p",null,"So far so good. The natural way to use this image would be to give the URL as an argument but unfortunately, it does not work:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-console"},'$ docker run yt-dlp https://www.youtube.com/watch?v=uTZSILGTskA\n\n  docker: Error response from daemon: failed to create task for container: failed to create shim task: OCI runtime create failed: runc create failed: unable to start container process: exec: "https://www.youtube.com/watch?v=uTZSILGTskA": stat https://www.youtube.com/watch?v=uTZSILGTskA: no such file or directory: unknown.\n  ERRO[0000] error waiting for container: context canceled\n')),(0,o.kt)("p",null,"As we now know, ",(0,o.kt)("em",{parentName:"p"},"the argument we gave it is replacing the command")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"CMD"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-console"},"$ docker run -it yt-dlp ps\n  PID TTY          TIME CMD\n    1 pts/0    00:00:00 ps\n$ docker run -it yt-dlp ls -l\ntotal 0\n$ docker run -it yt-dlp pwd\n/mydir\n")),(0,o.kt)("p",null,"We need a way to have something ",(0,o.kt)("em",{parentName:"p"},"before")," the command. Luckily we have a way to do this: we can use ",(0,o.kt)("a",{parentName:"p",href:"https://docs.docker.com/engine/reference/builder/#entrypoint"},"ENTRYPOINT")," to define the main executable and then Docker will combine our run arguments for it."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dockerfile"},'FROM ubuntu:22.04\n\nWORKDIR /mydir\n\nRUN apt-get update && apt-get install -y curl python3\nRUN curl -L https://github.com/yt-dlp/yt-dlp/releases/latest/download/yt-dlp -o /usr/local/bin/yt-dlp\nRUN chmod a+x /usr/local/bin/yt-dlp\n\n# Replacing CMD with ENTRYPOINT\nENTRYPOINT ["/usr/local/bin/yt-dlp"]\n')),(0,o.kt)("p",null,"And now it works like it should:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-console"},"$ docker build -t yt-dlp .\n$ docker run yt-dlp https://www.youtube.com/watch?v=XsqlHHTGQrw\n[youtube] Extracting URL:https://www.youtube.com/watch?v=XsqlHHTGQrw\n[youtube] uTZSILGTskA: Downloading webpage\n[youtube] uTZSILGTskA: Downloading ios player API JSON\n[youtube] uTZSILGTskA: Downloading android player API JSON\n[youtube] uTZSILGTskA: Downloading m3u8 information\n[info] uTZSILGTskA: Downloading 1 format(s): 22\n[download] Destination: Master\u2019s Programme in Computer Science \uff5c University of Helsinki [XsqlHHTGQrw].mp4\n[download] 100% of    6.29MiB in 00:00:00 at 9.95MiB/s\n")),(0,o.kt)("p",null,"With ",(0,o.kt)("em",{parentName:"p"},"ENTRYPOINT")," ",(0,o.kt)("inlineCode",{parentName:"p"},"docker run")," now executed the combined ",(0,o.kt)("inlineCode",{parentName:"p"},"/usr/local/bin/yt-dlp https://www.youtube.com/watch?v=uTZSILGTskA")," inside the container!"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"ENTRYPOINT")," vs ",(0,o.kt)("inlineCode",{parentName:"p"},"CMD")," can be confusing - in a properly set up image, such as our yt-dlp, the command represents an argument list for the entrypoint. By default, the entrypoint in Docker is set as ",(0,o.kt)("inlineCode",{parentName:"p"},"/bin/sh -c")," and this is passed if no entrypoint is set. This is why giving the path to a script file as CMD works: you're giving the file as a parameter to ",(0,o.kt)("inlineCode",{parentName:"p"},"/bin/sh -c"),"."),(0,o.kt)("p",null,"If an image defines both, then the CMD is used to give ",(0,o.kt)("a",{parentName:"p",href:"https://docs.docker.com/engine/reference/builder/#cmd"},"default arguments")," to the entrypoint. Let us now add a CMD to the Dockerfile:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dockerfile"},'FROM ubuntu:22.04\n\nWORKDIR /mydir\n\nRUN apt-get update && apt-get install -y curl python3\nRUN curl -L https://github.com/yt-dlp/yt-dlp/releases/latest/download/yt-dlp -o /usr/local/bin/yt-dlp\nRUN chmod a+x /usr/local/bin/yt-dlp\n\nENTRYPOINT ["/usr/local/bin/yt-dlp"]\n\n# define a default argument\nCMD ["https://www.youtube.com/watch?v=Aa55RKWZxxI"]\n')),(0,o.kt)("p",null,"Now (after building again) the image can be run without arguments to download the video defined in CMD:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-console"},"$ docker run yt-dlp\n\n  youtube] Extracting URL: https://www.youtube.com/watch?v=Aa55RKWZxxI\n  [youtube] Aa55RKWZxxI: Downloading webpage\n  [youtube] Aa55RKWZxxI: Downloading ios player API JSON\n  [youtube] Aa55RKWZxxI: Downloading android player API JSON\n  ...\n  [download] 100% of    5.60MiB in 00:00:00 at 7.91MiB/s\n")),(0,o.kt)("p",null,"The argument defined by CMD can be ",(0,o.kt)("em",{parentName:"p"},"overridden")," by giving one in the command line:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-console"},"$ docker run yt-dlp https://www.youtube.com/watch?v=DptFY_MszQs\n[youtube] Extracting URL: https://www.youtube.com/watch?v=DptFY_MszQs\n[youtube] DptFY_MszQs: Downloading webpage\n[youtube] DptFY_MszQs: Downloading ios player API JSON\n[youtube] DptFY_MszQs: Downloading android player API JSON\n[youtube] DptFY_MszQs: Downloading player 9bb09009\n[youtube] DptFY_MszQs: Downloading m3u8 information\n[info] DptFY_MszQs: Downloading 1 format(s): 22\n[download] Destination: Welcome to Kumpula campus! \uff5c University of Helsinki [DptFY_MszQs].mp4\n[download] 100% of   29.92MiB in 00:00:04 at 7.10MiB/s\n")),(0,o.kt)("p",null,"In addition to all seen, there are two ways to set the ENTRYPOINT and CMD: ",(0,o.kt)("strong",{parentName:"p"},"exec")," form and ",(0,o.kt)("strong",{parentName:"p"},"shell")," form. We've been using the exec form where the command itself is executed. In shell form the command that is executed is wrapped with ",(0,o.kt)("inlineCode",{parentName:"p"},"/bin/sh -c")," - it's useful when you need to evaluate environment variables in the command like ",(0,o.kt)("inlineCode",{parentName:"p"},"$MYSQL_PASSWORD")," or similar."),(0,o.kt)("p",null,"In the shell form, the command is provided as a string without brackets. In the exec form the command and it's arguments are provided as a list (with brackets), see the table below:"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Dockerfile"),(0,o.kt)("th",{parentName:"tr",align:null},"Resulting command"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"ENTRYPOINT /bin/ping -c 3 ",(0,o.kt)("br",null)," CMD localhost"),(0,o.kt)("td",{parentName:"tr",align:null},"/bin/sh -c '/bin/ping -c 3' /bin/sh -c localhost")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"ENTRYPOINT ",'["/bin/ping","-c","3"]'," ",(0,o.kt)("br",null)," CMD localhost"),(0,o.kt)("td",{parentName:"tr",align:null},"/bin/ping -c 3 /bin/sh -c localhost")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"ENTRYPOINT /bin/ping -c 3 ",(0,o.kt)("br",null)," CMD ",'["localhost"]'),(0,o.kt)("td",{parentName:"tr",align:null},"/bin/sh -c '/bin/ping -c 3' localhost")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"ENTRYPOINT ",'["/bin/ping","-c","3"]'," ",(0,o.kt)("br",null)," CMD ",'["localhost"]'),(0,o.kt)("td",{parentName:"tr",align:null},"/bin/ping -c 3 localhost")))),(0,o.kt)("p",null,"As the command at the end of Docker run will be the CMD we want to use ENTRYPOINT to specify what to run, and CMD to specify which command (in our case url) to run."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Most of the time")," we can ignore ENTRYPOINT when building our images and only use CMD. For example, Ubuntu image defaults the ENTRYPOINT to bash so we do not have to worry about it. And it gives us the convenience of allowing us to overwrite the CMD easily, for example, with bash to go inside the container."),(0,o.kt)("p",null,"We can test how some other projects do this. Let's try Python:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-console"},'$ docker pull python:3.11\n...\n$ docker run -it python:3.11\nPython 3.11.8 (main, Feb 13 2024, 09:03:56) [GCC 12.2.0] on linux\nType "help", "copyright", "credits" or "license" for more information.\n>>> print("Hello, World!")\nHello, World!\n>>> exit()\n\n$ docker run -it python:3.11 --version\n  docker: Error response from daemon: OCI runtime create failed: container_linux.go:370: starting container process caused: exec: "--version": executable file not found in $PATH: unknown.\n\n$ docker run -it python:3.11 bash\n  root@1b7b99ae2f40:/#\n\n')),(0,o.kt)("p",null,"From this experiment, we learned that they have ENTRYPOINT as something other than Python, but the CMD is Python and we can overwrite it, here with bash. If they had ENTRYPOINT as Python we'd be able to run ",(0,o.kt)("inlineCode",{parentName:"p"},"--version"),". We can create our own image for personal use as we did in a previous exercise with a new Dockerfile:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dockerfile"},'FROM python:3.11\nENTRYPOINT ["python3"]\nCMD ["--help"]\n')),(0,o.kt)("p",null,"The result is an image that has Python as ENTRYPOINT and you can add the commands at the end, for example --version to see the version. Without overwriting the command, it will output the help."),(0,o.kt)("p",null,"Now we have two problems with the yt-dlp project:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Major: The downloaded files stay in the container")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Minor: Our container build process creates many layers resulting in increased image size"))),(0,o.kt)("p",null,"We will fix the major issue first. The minor issue will get our attention in part 3."),(0,o.kt)("p",null,"By inspecting ",(0,o.kt)("inlineCode",{parentName:"p"},"docker container ls -a")," we can see all our previous runs. When we filter this list with"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-console"},'$ docker container ls -a --last 3\n\n  CONTAINER ID        IMAGE               COMMAND                   CREATED                  STATUS                          PORTS               NAMES\n  be9fdbcafb23        yt-dlp          "/usr/local/bin/yout\u2026"    Less than a second ago   Exited (0) About a minute ago                       determined_elion\n  b61e4029f997        f2210c2591a1        "/bin/sh -c \\"/usr/lo\u2026"   Less than a second ago   Exited (2) About a minute ago                       vigorous_bardeen\n  326bb4f5af1e        f2210c2591a1        "/bin/sh -c \\"/usr/lo\u2026"   About a minute ago       Exited (2) 3 minutes ago                            hardcore_carson\n')),(0,o.kt)("p",null,"We see that the last container was ",(0,o.kt)("inlineCode",{parentName:"p"},"be9fdbcafb23")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"determined_elion")," for us humans."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-console"},"$ docker diff determined_elion\n  C /root\n  A /root/.cache\n  A /root/.cache/yt-dlp\n  A /root/.cache/yt-dlp/youtube-nsig\n  A /root/.cache/yt-dlp/youtube-nsig/9bb09009.json\n  C /mydir\n  A /mydir/Welcome to Kumpula campus! \uff5c University of Helsinki [DptFY_MszQs].mp4\n")),(0,o.kt)("p",null,"Let's try ",(0,o.kt)("inlineCode",{parentName:"p"},"docker cp")," command to copy the file from the container to the host machine. We should use quotes now since the filename has spaces."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-console"},'$ docker cp "determined_elion://mydir/Welcome to Kumpula campus! \uff5c University of Helsinki [DptFY_MszQs].mp4" .\n')),(0,o.kt)("p",null,"And now we have our file locally and we can watch it if the machine has a suitable player installed. Sadly, the use of ",(0,o.kt)("inlineCode",{parentName:"p"},"docker cp")," is not proper to fix our issue. In the next section, we will improve this."),(0,o.kt)("h2",{id:"improved-curler"},"Improved curler"),(0,o.kt)("p",null,"With ",(0,o.kt)("inlineCode",{parentName:"p"},"ENTRYPOINT")," we can make the curler of the ",(0,o.kt)("a",{parentName:"p",href:"/part-1/section-3#exercises-17---18"},"Exercise 1.7.")," more flexible."),(0,o.kt)("p",null,"Change the script so that it takes the first argument as the input:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'#!/bin/bash\n\necho "Searching..";\nsleep 1;\ncurl http://$1;\n')),(0,o.kt)("p",null,"And change the CMD to ENTRYPOINT with the format ",(0,o.kt)("inlineCode",{parentName:"p"},'["./script.sh"]'),". Now we can run"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'$ docker build . -t curler-v2\n$ docker run curler-v2 helsinki.fi\n\n  Searching..\n    % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                   Dload  Upload   Total   Spent    Left  Speed\n  100   232  100   232    0     0  13647      0 --:--:-- --:--:-- --:--:-- 13647\n  <!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">\n  <html><head>\n  <title>301 Moved Permanently</title>\n  </head><body>\n  <h1>Moved Permanently</h1>\n  <p>The document has moved <a href="https://www.helsinki.fi/">here</a>.</p>\n  </body></html>\n')))}c.isMDXComponent=!0}}]);
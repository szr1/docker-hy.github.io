"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[948],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=o.createContext({}),u=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=u(e.components);return o.createElement(s.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),c=u(n),m=r,h=c["".concat(s,".").concat(m)]||c[m]||d[m]||a;return n?o.createElement(h,i(i({ref:t},p),{},{components:n})):o.createElement(h,i({ref:t},p))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[c]="string"==typeof e?e:r,i[1]=l;for(var u=2;u<a;u++)i[u]=n[u];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},3906:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>l,toc:()=>u});var o=n(7462),r=(n(7294),n(3905));const a={title:"Running and stopping containers"},i=void 0,l={unversionedId:"part-1/section-2",id:"part-1/section-2",title:"Running and stopping containers",description:"Next we will start using a more useful image than hello-world. We can run Ubuntu just with docker run ubuntu.",source:"@site/docs/part-1/section-2.md",sourceDirName:"part-1",slug:"/part-1/section-2",permalink:"/part-1/section-2",draft:!1,editUrl:"https://github.com/docker-hy/docker-hy.github.io/blob/master/docs/part-1/section-2.md",tags:[],version:"current",frontMatter:{title:"Running and stopping containers"},sidebar:"materialSidebar",previous:{title:"Definitions and basic concepts",permalink:"/part-1/section-1"},next:{title:"In-depth dive into images",permalink:"/part-1/section-3"}},s={},u=[{value:"Running processes inside a container with docker exec",id:"running-processes-inside-a-container-with-docker-exec",level:3},{value:"Exercise 1.3",id:"exercise-13",level:3},{value:"Nonmatching host platform",id:"nonmatching-host-platform",level:2},{value:"Ubuntu in a container is just... Ubuntu",id:"ubuntu-in-a-container-is-just-ubuntu",level:2},{value:"Exercise 1.4",id:"exercise-14",level:2}],p={toc:u},c="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(c,(0,o.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Next we will start using a more useful image than hello-world. We can run Ubuntu just with ",(0,r.kt)("inlineCode",{parentName:"p"},"docker run ubuntu"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-console"},"$ docker run ubuntu\n  Unable to find image 'ubuntu:latest' locally\n  latest: Pulling from library/ubuntu\n  83ee3a23efb7: Pull complete\n  db98fc6f11f0: Pull complete\n  f611acd52c6c: Pull complete\n  Digest: sha256:703218c0465075f4425e58fac086e09e1de5c340b12976ab9eb8ad26615c3715\n  Status: Downloaded newer image for ubuntu:latest\n")),(0,r.kt)("p",null,"Anticlimactic as nothing really happened. The image was downloaded and ran and that was the end of that. It actually tried to open a shell but we will need to add a few flags to interact with it. ",(0,r.kt)("inlineCode",{parentName:"p"},"-t")," will create a ",(0,r.kt)("a",{parentName:"p",href:"https://itsfoss.com/what-is-tty-in-linux/"},"tty"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-console"},"$ docker run -t ubuntu\n  root@f83969ce2cd1:/#\n")),(0,r.kt)("p",null,"Now we're inside the container and if we input ",(0,r.kt)("inlineCode",{parentName:"p"},"ls")," and press enter... nothing happens. Because our terminal is not sending the messages into the container. The ",(0,r.kt)("inlineCode",{parentName:"p"},"-i")," flag will instruct to pass the STDIN to the container. If you're stuck with the other terminal you can just stop the container."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-console"},"$ docker run -it ubuntu\n  root@2eb70ecf5789:/# ls\n  bin  boot  dev  etc  home  lib  lib32  lib64  libx32  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var\n")),(0,r.kt)("p",null,"Great! Now we know at least 3 useful flags. ",(0,r.kt)("inlineCode",{parentName:"p"},"-i")," (interactive), ",(0,r.kt)("inlineCode",{parentName:"p"},"-t")," (tty) and ",(0,r.kt)("inlineCode",{parentName:"p"},"-d")," (detached)."),(0,r.kt)("p",null,"Let's throw in a few more and run a container in the background:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-console"},"$ docker run -d -it --name looper ubuntu sh -c 'while true; do date; sleep 1; done'\n")),(0,r.kt)("admonition",{title:"Quotes",type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"If you are command prompt (Windows) user you must use double quotes around the script i.e. ",(0,r.kt)("inlineCode",{parentName:"p"},'docker run -d -it --name looper ubuntu sh -c "while true; do date; sleep 1; done"'),". The quote or double-quote may haunt you later during the course.")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"The first part, ",(0,r.kt)("inlineCode",{parentName:"p"},"docker run -d"),". Should be familiar by now, run container detached.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Followed by ",(0,r.kt)("inlineCode",{parentName:"p"},"-it")," is short for ",(0,r.kt)("inlineCode",{parentName:"p"},"-i")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"-t"),". Also familiar, ",(0,r.kt)("inlineCode",{parentName:"p"},"-it")," allows you to interact with the container by using the command line.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Because we ran the container with ",(0,r.kt)("inlineCode",{parentName:"p"},"--name looper"),", we can now reference it easily.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"The image is ",(0,r.kt)("inlineCode",{parentName:"p"},"ubuntu")," and what follows it is the command given to the container."))),(0,r.kt)("p",null,"And to check that it's running, run ",(0,r.kt)("inlineCode",{parentName:"p"},"docker container ls")),(0,r.kt)("p",null,"Let's follow ",(0,r.kt)("inlineCode",{parentName:"p"},"-f")," the output of logs with"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-console"},"$ docker logs -f looper\n  Thu Mar  1 15:51:29 UTC 2023\n  Thu Mar  1 15:51:30 UTC 2023\n  Thu Mar  1 15:51:31 UTC 2023\n  ...\n")),(0,r.kt)("p",null,"Let's test pausing the looper without exiting or stopping it. In another terminal run ",(0,r.kt)("inlineCode",{parentName:"p"},"docker pause looper"),". Notice how the logs output has paused in the first terminal. To unpause run ",(0,r.kt)("inlineCode",{parentName:"p"},"docker unpause looper"),"."),(0,r.kt)("p",null,"Keep the logs open and attach to the running container from the second terminal using 'attach':"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-console"},"$ docker attach looper\n  Thu Mar  1 15:54:38 UTC 2023\n  Thu Mar  1 15:54:39 UTC 2023\n  ...\n")),(0,r.kt)("p",null,"Now you have process logs (STDOUT) running in two terminals. Now press control+c in the attached window. The container is stopped because the process is no longer running."),(0,r.kt)("p",null,"If we want to attach to a container while making sure we don't close it from the other terminal we can specify to not attach STDIN with ",(0,r.kt)("inlineCode",{parentName:"p"},"--no-stdin")," option. Let's start the stopped container with ",(0,r.kt)("inlineCode",{parentName:"p"},"docker start looper")," and attach to it with ",(0,r.kt)("inlineCode",{parentName:"p"},"--no-stdin"),"."),(0,r.kt)("p",null,"Then try control+c."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-console"},"$ docker start looper\n\n$ docker attach --no-stdin looper\n  Thu Mar  1 15:56:11 UTC 2023\n  Thu Mar  1 15:56:12 UTC 2023\n  ^C\n")),(0,r.kt)("p",null,"The container will continue running. Control+c now only disconnects you from the STDOUT."),(0,r.kt)("h3",{id:"running-processes-inside-a-container-with-docker-exec"},"Running processes inside a container with docker exec"),(0,r.kt)("p",null,"We often encounter situations where we need to execute commands within a running container. This can be achieved using the ",(0,r.kt)("inlineCode",{parentName:"p"},"docker exec")," command."),(0,r.kt)("p",null,"We could e.g. list all the files inside the container default directory (which is the root) as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-console"},"$ docker exec looper ls -la\ntotal 56\ndrwxr-xr-x   1 root root 4096 Mar  6 10:24 .\ndrwxr-xr-x   1 root root 4096 Mar  6 10:24 ..\n-rwxr-xr-x   1 root root    0 Mar  6 10:24 .dockerenv\nlrwxrwxrwx   1 root root    7 Feb 27 16:01 bin -> usr/bin\ndrwxr-xr-x   2 root root 4096 Apr 18  2022 boot\ndrwxr-xr-x   5 root root  360 Mar  6 10:24 dev\ndrwxr-xr-x   1 root root 4096 Mar  6 10:24 etc\ndrwxr-xr-x   2 root root 4096 Apr 18  2022 home\nlrwxrwxrwx   1 root root    7 Feb 27 16:01 lib -> usr/lib\ndrwxr-xr-x   2 root root 4096 Feb 27 16:01 media\ndrwxr-xr-x   2 root root 4096 Feb 27 16:01 mnt\ndrwxr-xr-x   2 root root 4096 Feb 27 16:01 opt\ndr-xr-xr-x 293 root root    0 Mar  6 10:24 proc\ndrwx------   2 root root 4096 Feb 27 16:08 root\ndrwxr-xr-x   5 root root 4096 Feb 27 16:08 run\nlrwxrwxrwx   1 root root    8 Feb 27 16:01 sbin -> usr/sbin\ndrwxr-xr-x   2 root root 4096 Feb 27 16:01 srv\ndr-xr-xr-x  13 root root    0 Mar  6 10:24 sys\ndrwxrwxrwt   2 root root 4096 Feb 27 16:08 tmp\ndrwxr-xr-x  11 root root 4096 Feb 27 16:01 usr\ndrwxr-xr-x  11 root root 4096 Feb 27 16:08 var\n")),(0,r.kt)("p",null,"We can execute the Bash shell in the container in interactive mode and then run any commands within that Bash session:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-console"},"$ docker exec -it looper bash\n\n  root@2a49df3ba735:/# ps aux\n\n  USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND\n  root         1  0.2  0.0   2612  1512 pts/0    Ss+  12:36   0:00 sh -c while true; do date; sleep 1; done\n  root        64  1.5  0.0   4112  3460 pts/1    Ss   12:36   0:00 bash\n  root        79  0.0  0.0   2512   584 pts/0    S+   12:36   0:00 sleep 1\n  root        80  0.0  0.0   5900  2844 pts/1    R+   12:36   0:00 ps aux\n")),(0,r.kt)("p",null,"From the ",(0,r.kt)("inlineCode",{parentName:"p"},"ps aux")," listing we can see that our ",(0,r.kt)("inlineCode",{parentName:"p"},"bash")," process got PID (process ID) of 64."),(0,r.kt)("p",null,"Now that we're inside the container it behaves as you'd expect from Ubuntu, and we can exit the container with ",(0,r.kt)("inlineCode",{parentName:"p"},"exit")," and then either kill or stop the container."),(0,r.kt)("p",null,"Our looper won't stop for a SIGTERM signal sent by a stop command. To terminate the process, stop follows the SIGTERM with a SIGKILL after a grace period. In this case, it's simply faster to use kill."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-console"},"$ docker kill looper\n$ docker rm looper\n")),(0,r.kt)("p",null,"Running the previous two commands is basically equivalent to running ",(0,r.kt)("inlineCode",{parentName:"p"},"docker rm --force looper")),(0,r.kt)("p",null,"Let's start another process with ",(0,r.kt)("inlineCode",{parentName:"p"},"-it")," and add ",(0,r.kt)("inlineCode",{parentName:"p"},"--rm")," in order to remove it automatically after it has exited. The ",(0,r.kt)("inlineCode",{parentName:"p"},"--rm")," ensures that there are no garbage containers left behind. It also means that ",(0,r.kt)("inlineCode",{parentName:"p"},"docker start")," can not be used to start the container after it has exited."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-console"},"$ docker run -d --rm -it --name looper-it ubuntu sh -c 'while true; do date; sleep 1; done'\n")),(0,r.kt)("p",null,"Now let's attach to the container and hit control+p, control+q to detach us from the STDOUT."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-console"},"$ docker attach looper-it\n\n  Mon Jan 15 19:50:42 UTC 2018\n  Mon Jan 15 19:50:43 UTC 2018\n  ^P^Qread escape sequence\n")),(0,r.kt)("p",null,"Instead, if we had used ctrl+c, it would have sent a kill signal followed by removing the container as we specified ",(0,r.kt)("inlineCode",{parentName:"p"},"--rm")," in ",(0,r.kt)("inlineCode",{parentName:"p"},"docker run")," command."),(0,r.kt)("h3",{id:"exercise-13"},"Exercise 1.3"),(0,r.kt)("admonition",{title:"Exercise 1.3: Secret message",type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Now that we've warmed up it's time to get inside a container while it's running!"),(0,r.kt)("p",{parentName:"admonition"},"Image ",(0,r.kt)("inlineCode",{parentName:"p"},"devopsdockeruh/simple-web-service:ubuntu")," will start a container that outputs logs into a file. Go inside the running container and use ",(0,r.kt)("inlineCode",{parentName:"p"},"tail -f ./text.log"),' to follow the logs. Every 10 seconds the clock will send you a "secret message".'),(0,r.kt)("p",{parentName:"admonition"},"Submit the secret message and command(s) given as your answer.")),(0,r.kt)("h2",{id:"nonmatching-host-platform"},"Nonmatching host platform"),(0,r.kt)("p",null,"If you are working with M1/M2 Mac, you quite likely end up with the following warning when running the image ",(0,r.kt)("em",{parentName:"p"},"devopsdockeruh/simple-web-service:ubuntu"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-console"},"WARNING: The requested image's platform (linux/amd64) does not match the detected \nhost platform (linux/arm64/v8) and no specific platform was requested\n")),(0,r.kt)("p",null,"Despite this warning, you can run the container. The warning basically says what's wrong, the image uses a different processor architecture than your machine."),(0,r.kt)("p",null,"The image can be used because Docker Desktop for Mac employs an emulator by default when the image's processor architecture does not match the host's. However, it's important to note that emulated execution may be less efficient in terms of performance than running the image on a compatible native processor architecture."),(0,r.kt)("p",null,"When you run ",(0,r.kt)("inlineCode",{parentName:"p"},"docker run ubuntu")," for example, you don't get a warning, why is that? Quite a few popular images are so-called ",(0,r.kt)("a",{parentName:"p",href:"https://docs.docker.com/build/building/multi-platform/"},"multi platform images"),", which means that one image contains variations for different architectures. When you are about to pull or run such an image, Docker will detect the host architecture and give you the correct type of image."),(0,r.kt)("h2",{id:"ubuntu-in-a-container-is-just-ubuntu"},"Ubuntu in a container is just... Ubuntu"),(0,r.kt)("p",null,"A container that is running a Ubuntu image works quite like a normal Ubuntu:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-console"},"$ docker run -it ubuntu\nroot@881a1d4ecff2:/# ls\nbin   dev  home  media  opt   root  sbin  sys  usr\nboot  etc  lib   mnt    proc  run   srv   tmp  var\nroot@881a1d4ecff2:/# ps\n  PID TTY          TIME CMD\n    1 pts/0    00:00:00 bash\n   13 pts/0    00:00:00 ps\nroot@881a1d4ecff2:/# date\nWed Mar  1 12:08:24 UTC 2023\nroot@881a1d4ecff2:/#\n")),(0,r.kt)("p",null,"An image like Ubuntu contains already a nice set of tools but sometimes just the one that we need is not within the standard distribution. Let us assume that we would like to edit some files inside the container. The good old ",(0,r.kt)("a",{parentName:"p",href:"https://www.nano-editor.org/"},"Nano")," editor is a perfect fit for our purposes. We can install it in the container by using ",(0,r.kt)("a",{parentName:"p",href:"https://help.ubuntu.com/community/AptGet/Howto"},"apt-get"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-console"},"$ docker run -it ubuntu\nroot@881a1d4ecff2:/# apt-get update\nroot@881a1d4ecff2:/# apt-get -y install nano\nroot@881a1d4ecff2:/# cd tmp/\nroot@881a1d4ecff2:/tmp# nano temp_file.txt\n")),(0,r.kt)("p",null,'As can be seen, installing a program or library to a container happens just like the installation is done in "normal" Ubuntu. The remarkable difference is that the installation of Nano is not permanent, that is, if we remove our container, all is gone. We shall soon see how to get a more permanent solution for building images that are perfect to our purposes.'),(0,r.kt)("h2",{id:"exercise-14"},"Exercise 1.4"),(0,r.kt)("admonition",{title:"Exercise 1.4: Missing dependencies",type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Start a Ubuntu image with the process ",(0,r.kt)("inlineCode",{parentName:"p"},'sh -c \'while true; do echo "Input website:"; read website; echo "Searching.."; sleep 1; curl http://$website; done\'')),(0,r.kt)("p",{parentName:"admonition"},"If you're on Windows, you'll want to switch the ",(0,r.kt)("inlineCode",{parentName:"p"},"'")," and ",(0,r.kt)("inlineCode",{parentName:"p"},'"')," around: ",(0,r.kt)("inlineCode",{parentName:"p"},"sh -c \"while true; do echo 'Input website:'; read website; echo 'Searching..'; sleep 1; curl http://$website; done\""),"."),(0,r.kt)("p",{parentName:"admonition"},"You will notice that a few things required for proper execution are missing. Be sure to remind yourself which flags to use so that the container actually waits for input."),(0,r.kt)("blockquote",{parentName:"admonition"},(0,r.kt)("p",{parentName:"blockquote"},"Note also that curl is NOT installed in the container yet. You will have to install it from inside of the container.")),(0,r.kt)("p",{parentName:"admonition"},"Test inputting ",(0,r.kt)("inlineCode",{parentName:"p"},"helsinki.fi")," into the application. It should respond with something like"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-html"},'<html>\n  <head>\n    <title>301 Moved Permanently</title>\n  </head>\n\n  <body>\n    <h1>Moved Permanently</h1>\n    <p>The document has moved <a href="http://www.helsinki.fi/">here</a>.</p>\n  </body>\n</html>\n')),(0,r.kt)("p",{parentName:"admonition"},"This time return the command you used to start process and the command(s) you used to fix the ensuing problems."),(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("strong",{parentName:"p"},"Hint")," for installing the missing dependencies you could start a new process with ",(0,r.kt)("inlineCode",{parentName:"p"},"docker exec"),"."),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},"This exercise has multiple solutions, if the curl for helsinki.fi works then it's done. Can you figure out other (smart) solutions?"))))}d.isMDXComponent=!0}}]);
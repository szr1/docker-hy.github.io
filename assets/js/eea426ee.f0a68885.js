"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[538],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>k});var o=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=o.createContext({}),l=function(e){var t=o.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=l(e.components);return o.createElement(p.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,p=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),m=l(n),u=a,k=m["".concat(p,".").concat(u)]||m[u]||d[u]||r;return n?o.createElement(k,i(i({ref:t},c),{},{components:n})):o.createElement(k,i({ref:t},c))}));function k(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,i=new Array(r);i[0]=u;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s[m]="string"==typeof e?e:a,i[1]=s;for(var l=2;l<r;l++)i[l]=n[l];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}u.displayName="MDXCreateElement"},7530:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>d,frontMatter:()=>r,metadata:()=>s,toc:()=>l});var o=n(7462),a=(n(7294),n(3905));const r={title:"Migrating to Docker Compose"},i=void 0,s={unversionedId:"part-2/section-1",id:"part-2/section-1",title:"Migrating to Docker Compose",description:"Even with a simple image, we've already been dealing with plenty of command line options in both building, pushing and running the image.",source:"@site/docs/part-2/section-1.md",sourceDirName:"part-2",slug:"/part-2/section-1",permalink:"/part-2/section-1",draft:!1,editUrl:"https://github.com/docker-hy/docker-hy.github.io/blob/master/docs/part-2/section-1.md",tags:[],version:"current",frontMatter:{title:"Migrating to Docker Compose"},sidebar:"materialSidebar",previous:{title:"Introduction to Part 2",permalink:"/part-2/"},next:{title:"Docker networking",permalink:"/part-2/section-2"}},p={},l=[{value:"Volumes in Docker Compose",id:"volumes-in-docker-compose",level:2},{value:"Exercise 2.1",id:"exercise-21",level:2},{value:"Web services in Docker Compose",id:"web-services-in-docker-compose",level:2},{value:"Exercises 2.2 - 2.3",id:"exercises-22---23",level:2}],c={toc:l},m="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(m,(0,o.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Even with a simple image, we've already been dealing with plenty of command line options in both building, pushing and running the image."),(0,a.kt)("p",null,"Next we will switch to a tool called ",(0,a.kt)("a",{parentName:"p",href:"https://docs.docker.com/compose/"},"Docker Compose")," to manage these. Docker Compose used to be a separate tool but now it is integrated into Docker and can be used like the rest of the Docker commands."),(0,a.kt)("p",null,"Docker Compose is designed to simplify running multi-container applications using a single command."),(0,a.kt)("p",null,"Assume that we are in the folder where we have our Dockerfile with the following content:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-dockerfile"},'FROM ubuntu:22.04\n\nWORKDIR /mydir\n\nRUN apt-get update && apt-get install -y curl python3\nRUN curl -L https://github.com/yt-dlp/yt-dlp/releases/latest/download/yt-dlp -o /usr/local/bin/yt-dlp\nRUN chmod a+x /usr/local/bin/yt-dlp\n\nENTRYPOINT ["/usr/local/bin/yt-dlp"]\n')),(0,a.kt)("p",null,"Let us now create a file called ",(0,a.kt)("inlineCode",{parentName:"p"},"docker-compose.yml"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"version: '3.8'\n\nservices:\n  yt-dlp-ubuntu:\n    image: <username>/<repositoryname>\n    build: .\n")),(0,a.kt)("p",null,"The version setting is not very strict, it just needs to be above 2 because otherwise the syntax is significantly different. See ",(0,a.kt)("a",{parentName:"p",href:"https://docs.docker.com/compose/compose-file/"},"https://docs.docker.com/compose/compose-file/")," for more info."),(0,a.kt)("p",null,"The value of the key ",(0,a.kt)("inlineCode",{parentName:"p"},"build")," can be a file system path (in the example it is the current directory ",(0,a.kt)("inlineCode",{parentName:"p"},"."),") or an object with keys ",(0,a.kt)("inlineCode",{parentName:"p"},"context")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"dockerfile"),", see the ",(0,a.kt)("a",{parentName:"p",href:"https://docs.docker.com/compose/compose-file/build/"},"documentation")," for more"),(0,a.kt)("p",null,"Now we can build and push with just these commands:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-console"},"$ docker compose build\n$ docker compose push\n")),(0,a.kt)("h2",{id:"volumes-in-docker-compose"},"Volumes in Docker Compose"),(0,a.kt)("p",null,"To run the image as we did previously, we will need to add the volume bind mounts. Volumes in Docker Compose are defined with the following syntax ",(0,a.kt)("inlineCode",{parentName:"p"},"location-in-host:location-in-container"),". Compose can work without an absolute path:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"version: '3.8'\n\nservices:\n\n  yt-dlp-ubuntu:\n    image: <username>/<repositoryname>\n    build: .\n    volumes:\n      - .:/mydir\n    container_name: yt-dlp\n")),(0,a.kt)("p",null,"We can also give the container a name it will use when running with container_name. The service name can be used to run it:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-console"},"$ docker compose run yt-dlp-ubuntu https://imgur.com/JY5tHqr\n")),(0,a.kt)("h2",{id:"exercise-21"},"Exercise 2.1"),(0,a.kt)("admonition",{title:"Exercise 2.1",type:"info"},(0,a.kt)("p",{parentName:"admonition"},"  Let us now leverage the Docker Compose with the simple webservice that we used in the ",(0,a.kt)("a",{parentName:"p",href:"/part-1/section-2#exercise-13"},"Exercise 1.3")),(0,a.kt)("p",{parentName:"admonition"},"  Without a command ",(0,a.kt)("inlineCode",{parentName:"p"},"devopsdockeruh/simple-web-service")," will create logs into its ",(0,a.kt)("inlineCode",{parentName:"p"},"/usr/src/app/text.log"),"."),(0,a.kt)("p",{parentName:"admonition"},"  Create a docker-compose.yml file that starts ",(0,a.kt)("inlineCode",{parentName:"p"},"devopsdockeruh/simple-web-service")," and saves the logs into your\nfilesystem."),(0,a.kt)("p",{parentName:"admonition"},"  Submit the docker-compose.yml, and make sure that it works simply by running ",(0,a.kt)("inlineCode",{parentName:"p"},"docker compose up")," if the log file exists.")),(0,a.kt)("h2",{id:"web-services-in-docker-compose"},"Web services in Docker Compose"),(0,a.kt)("p",null,"Compose is really meant for running web services, so let's move from simple binary wrappers to running a HTTP service."),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://github.com/jwilder/whoami"},"https://github.com/jwilder/whoami")," is a simple service that prints the current container id (hostname)."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-console"},"$ docker container run -d -p 8000:8000 jwilder/whoami\n  736ab83847bb12dddd8b09969433f3a02d64d5b0be48f7a5c59a594e3a6a3541\n")),(0,a.kt)("p",null,"Navigate with a browser or curl to localhost:8000, they both will answer with the id."),(0,a.kt)("p",null,"Take down the container so that it's not blocking port 8000."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-console"},"$ docker container stop 736ab83847bb\n$ docker container rm 736ab83847bb\n")),(0,a.kt)("p",null,"Let's create a new folder and a Docker Compose file ",(0,a.kt)("inlineCode",{parentName:"p"},"whoami/docker-compose.yml")," from the command line options."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"version: '3.8'\n\nservices:\n  whoami:\n    image: jwilder/whoami\n    ports:\n      - 8000:8000\n")),(0,a.kt)("p",null,"Test it:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-console"},"$ docker compose up -d\n$ curl localhost:8000\n")),(0,a.kt)("p",null,"Environment variables can also be given to the containers in Docker Compose as follows:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"version: '3.8'\n\nservices:\n  backend:\n    image:\n    environment:\n      - VARIABLE=VALUE\n      - VARIABLE2=VALUE2\n")),(0,a.kt)("p",null,"Note that there are also ",(0,a.kt)("a",{parentName:"p",href:"https://docs.docker.com/compose/environment-variables/set-environment-variables/"},"other"),", perhaps more elegant ways to define the environment variables in Docker compose."),(0,a.kt)("h2",{id:"exercises-22---23"},"Exercises 2.2 - 2.3"),(0,a.kt)("admonition",{title:"Exercise 2.2",type:"info"},(0,a.kt)("p",{parentName:"admonition"},"  Read about how to add the command to docker-compose.yml from the ",(0,a.kt)("a",{parentName:"p",href:"https://docs.docker.com/compose/compose-file/compose-file-v3/#command"},"documentation"),"."),(0,a.kt)("p",{parentName:"admonition"},"  The familiar image ",(0,a.kt)("inlineCode",{parentName:"p"},"devopsdockeruh/simple-web-service")," can be used to start a web service, see the ",(0,a.kt)("a",{parentName:"p",href:"/part-1/section-5#exercise-110"},"exercise 1.10"),"."),(0,a.kt)("p",{parentName:"admonition"},"  Create a docker-compose.yml, and use it to start the service so that you can use it with your browser."),(0,a.kt)("p",{parentName:"admonition"},"  Submit the docker-compose.yml, and make sure that it works simply by running ",(0,a.kt)("inlineCode",{parentName:"p"},"docker compose up"))),(0,a.kt)("admonition",{title:"Mandatory Exercise 2.3",type:"caution"},(0,a.kt)("p",{parentName:"admonition"},"  As we saw previously, starting an application with two programs was not trivial and the commands got a bit long."),(0,a.kt)("p",{parentName:"admonition"},"  In the ",(0,a.kt)("a",{parentName:"p",href:"/part-1/section-6"},"previous part")," we created Dockerfiles for both ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/docker-hy/material-applications/tree/main/example-frontend"},"frontend")," and ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/docker-hy/material-applications/tree/main/example-backend"},"backend")," of the example application. Next, simplify the usage into one docker-compose.yml."),(0,a.kt)("p",{parentName:"admonition"},"  Configure the backend and frontend from ",(0,a.kt)("a",{parentName:"p",href:"/part-1/section-6#exercises-111-114"},"part 1")," to work in Docker Compose."),(0,a.kt)("p",{parentName:"admonition"},"  Submit the docker-compose.yml")))}d.isMDXComponent=!0}}]);
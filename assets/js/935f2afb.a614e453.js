"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[53],{1109:e=>{e.exports=JSON.parse('{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"materialSidebar":[{"type":"link","label":"DevOps with Docker","href":"/","className":"hidden","docId":"intro"},{"type":"link","label":"Getting Started","href":"/getting-started","docId":"getting-started"},{"type":"link","label":"Frequently Asked Questions","href":"/faq","docId":"faq"},{"type":"category","label":"Part 1","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Introduction to Part 1","href":"/part-1/","docId":"part-1/index"},{"type":"link","label":"Definitions and basic concepts","href":"/part-1/section-1","docId":"part-1/section-1"},{"type":"link","label":"Running and stopping containers","href":"/part-1/section-2","docId":"part-1/section-2"},{"type":"link","label":"In-depth dive into images","href":"/part-1/section-3","docId":"part-1/section-3"},{"type":"link","label":"Defining start conditions for the container","href":"/part-1/section-4","docId":"part-1/section-4"},{"type":"link","label":"Interacting with the container via volumes and ports","href":"/part-1/section-5","docId":"part-1/section-5"},{"type":"link","label":"Utilizing tools from the Registry","href":"/part-1/section-6","docId":"part-1/section-6"},{"type":"link","label":"Summary","href":"/part-1/section-7","docId":"part-1/section-7"}],"href":"/category/part-1"},{"type":"category","label":"Part 2","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Introduction to Part 2","href":"/part-2/","docId":"part-2/index"},{"type":"link","label":"Migrating to Docker Compose","href":"/part-2/section-1","docId":"part-2/section-1"},{"type":"link","label":"Docker networking","href":"/part-2/section-2","docId":"part-2/section-2"},{"type":"link","label":"Volumes in action","href":"/part-2/section-3","docId":"part-2/section-3"},{"type":"link","label":"Containers in development","href":"/part-2/section-4","docId":"part-2/section-4"},{"type":"link","label":"Summary","href":"/part-2/section-5","docId":"part-2/section-5"}],"href":"/category/part-2"},{"type":"category","label":"Part 3","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Introduction to Part 3","href":"/part-3/","docId":"part-3/index"},{"type":"link","label":"Official Images and trust","href":"/part-3/section-1","docId":"part-3/section-1"},{"type":"link","label":"Deployment pipelines","href":"/part-3/section-2","docId":"part-3/section-2"},{"type":"link","label":"Using a non-root user","href":"/part-3/section-3","docId":"part-3/section-3"},{"type":"link","label":"Optimizing the image size","href":"/part-3/section-4","docId":"part-3/section-4"},{"type":"link","label":"Multi-host environments","href":"/part-3/section-5","docId":"part-3/section-5"},{"type":"link","label":"End","href":"/part-3/section-6","docId":"part-3/section-6"}],"href":"/category/part-3"},{"type":"link","label":"Credits","href":"/credits","className":"hidden","docId":"credits"}]},"docs":{"credits":{"id":"credits","title":"Credits","description":"The DevOps with Docker course was created by Jami Kousa with the help of University of Helsinki\'s Tietojenk\xe4sittelytieteen osaston sovelluskehitysakatemia (Toska) and numerous course attendees. This material is based on gist by Matti Paksula. You can help develop the course material as well.","sidebar":"materialSidebar"},"faq":{"id":"faq","title":"Frequently Asked Questions","description":"Prerequisites","sidebar":"materialSidebar"},"getting-started":{"id":"getting-started","title":"Getting Started","description":"Welcome to the DevOps with Docker course! This course is designed to be completed sequentially, from start to finish. Each part builds on the previous one, so it\'s important to read the material carefully and complete the exercises to develop the necessary skills.","sidebar":"materialSidebar"},"intro":{"id":"intro","title":"DevOps with Docker","description":"This course provides an introduction to container technologies, with a particular focus on Docker and container orchestration using Docker Compose. Containers are a lightweight, portable way to package and deploy software applications. Throughout the course, we\'ll explore the various components of web services, such as reverse proxies and databases, and how they can be deployed using Docker.","sidebar":"materialSidebar"},"part-1/index":{"id":"part-1/index","title":"Introduction to Part 1","description":"This part introduces containerization with Docker and relevant concepts such as image and volume. By the end of this part you are able to:","sidebar":"materialSidebar"},"part-1/section-1":{"id":"part-1/section-1","title":"Definitions and basic concepts","description":"What is DevOps?","sidebar":"materialSidebar"},"part-1/section-2":{"id":"part-1/section-2","title":"Running and stopping containers","description":"Next we will start using a more useful image than hello-world. We can run Ubuntu just with docker run ubuntu.","sidebar":"materialSidebar"},"part-1/section-3":{"id":"part-1/section-3","title":"In-depth dive into images","description":"Images are the basic building blocks for containers and other images. When you \\"containerize\\" an application you work towards creating the image.","sidebar":"materialSidebar"},"part-1/section-4":{"id":"part-1/section-4","title":"Defining start conditions for the container","description":"Next, we will start moving towards a more meaningful image. yt-dlp is a program that downloads YouTube and Imgur videos. Let\'s add it to an image - but this time, we will change our process. Instead of our current process where we add things to the Dockerfile and hope it works, let\'s try another approach. This time we will open up an interactive session and test stuff before \\"storing\\" it in our Dockerfile.","sidebar":"materialSidebar"},"part-1/section-5":{"id":"part-1/section-5","title":"Interacting with the container via volumes and ports","description":"Let us get back to yt-dlp. It works yes, but it is quite laborious to get the downloaded videos to the host machine.","sidebar":"materialSidebar"},"part-1/section-6":{"id":"part-1/section-6","title":"Utilizing tools from the Registry","description":"As we\'ve already seen it should be possible to containerize almost any project. Since we are in between Dev and Ops let\'s pretend that some developer teammates of ours did an application with a README that instructs what to install and how to run the application. Now we as the container experts can containerize it in seconds.","sidebar":"materialSidebar"},"part-1/section-7":{"id":"part-1/section-7","title":"Summary","description":"We started by learning what Docker container and image mean. Basically we started from an empty ubuntu with nothing installed into it. It\'s also possible to start from something else, but for now ubuntu had been enough.","sidebar":"materialSidebar"},"part-2/index":{"id":"part-2/index","title":"Introduction to Part 2","description":"This part introduces container orchestration with Docker Compose and relevant concepts such as docker network. By the end of this part you are able to:","sidebar":"materialSidebar"},"part-2/section-1":{"id":"part-2/section-1","title":"Migrating to Docker Compose","description":"Even with a simple image, we\'ve already been dealing with plenty of command line options in both building, pushing and running the image.","sidebar":"materialSidebar"},"part-2/section-2":{"id":"part-2/section-2","title":"Docker networking","description":"Connecting two services such as a server and its database in docker can be achieved with a Docker network. In addition to starting services listed in docker-compose.yml Docker Compose automatically creates and joins both containers into a network with a DNS. Each service is named after the name given in the docker-compose.yml file. As such, containers can reference each other simply with their service names, which is different from the container name.","sidebar":"materialSidebar"},"part-2/section-3":{"id":"part-2/section-3","title":"Volumes in action","description":"Next we\'re going to set up the project management application Redmine, a PostgreSQL database and Adminer, a graphical interface for database administration.","sidebar":"materialSidebar"},"part-2/section-4":{"id":"part-2/section-4","title":"Containers in development","description":"Containers are not only great in production. They can be used in development environments as well and offer several benefits. The same works-on-my-machine problem is faced often when a new developer joins the team. Not to mention the headache of switching runtime versions or a local database!","sidebar":"materialSidebar"},"part-2/section-5":{"id":"part-2/section-5","title":"Summary","description":"Again we started from the ground up by learning how to translate non-compose setup into docker-compose.yml and ran with it. Compose gave us also a few handy completely new features that we didn\'t even know we needed, networks.","sidebar":"materialSidebar"},"part-3/index":{"id":"part-3/index","title":"Introduction to Part 3","description":"This part introduces production-ready practices such as container optimization and deployment pipelines. We\'ll also familiarize ourselves with other container orchestration solutions. By the end of this part you are able to:","sidebar":"materialSidebar"},"part-3/section-1":{"id":"part-3/section-1","title":"Official Images and trust","description":"We\'ve focused on using Docker as a tool to solve various types of problems. Meanwhile we have decided to push some of the issues until later and completely ignored others.","sidebar":"materialSidebar"},"part-3/section-2":{"id":"part-3/section-2","title":"Deployment pipelines","description":"CI/CD pipeline (sometimes called deployment pipeline) is a corner stone of DevOps.","sidebar":"materialSidebar"},"part-3/section-3":{"id":"part-3/section-3","title":"Using a non-root user","description":"Let\'s get back to the yt-dlp application, that we for last time worked with it Part 2.","sidebar":"materialSidebar"},"part-3/section-4":{"id":"part-3/section-4","title":"Optimizing the image size","description":"A small image size has many advantages, firstly, it takes much less time to pull a small image from the registry. Another thing is the security: the bigger your image is the larger the surface area for an attack it has.","sidebar":"materialSidebar"},"part-3/section-5":{"id":"part-3/section-5","title":"Multi-host environments","description":"Now that we\'ve mastered containers in small systems with Docker Compose it\'s time to look beyond what the tools we practiced are capable of. In situations where we have more than a single host machine we cannot rely solely on Docker. However, Docker does contain other tools to help us with automatic deployment, scaling and management of dockerized applications.","sidebar":"materialSidebar"},"part-3/section-6":{"id":"part-3/section-6","title":"End","description":"Remember to mark your exercises in the submission application! Instructions on how and what to submit are on the getting started page.","sidebar":"materialSidebar"}}}')}}]);